#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/gamedata"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"

cd "$GAMEDIR"

unzip_audiogroups() {
    # Unzip audiogroups from game.apk into $DATADIR
    echo "Unzipping audiogroups..."
    unzip -j -o "$GAMEDIR/game.apk" "assets/*" -d "$DATADIR"
    if [ $? -eq 0 ]; then
        echo "Audiogroups unzipped successfully to $DATADIR."
    else
        echo "Failed to unzip audiogroups."
        exit 1
    fi
}

apply_xdelta() {
    # UFO 50 v1.4.2 patch
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        echo "Applying xdelta patch"
        output=$(xdelta3 -d -s "$DATADIR/data.win" -f "./tools/patches/ufo50.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm "$DATADIR/data.win"
        else
            echo "Failed to apply patch"
            echo "$output"
            exit 1
        fi
    fi
}

compress_audio() {
    # Compress audio
    echo "Compressing audio..."
    sleep 3
    mkdir -p "$TMPDIR"

    # Run the compression tool
    PYTHON=$(which python3)
    DATAONLY=1
    if [ "$PREPATCH" != 1 ]; then
        echo "Running GMTools on data and audiogroups."
        $PYTHON ./tools/gmKtool.py -vvv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"
    else
        echo "Running GMTools on data file only."
        $PYTHON ./tools/gmKtool.py -v -O 0 -m 1000 -b 64 -r -d "$TMPDIR" "$DATADIR/game.droid"
    fi

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
    fi
}

process_game() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"
    # Check if we're using a prepatched game
    if unzip -l "$GAMEDIR/game.apk" "assets/*" | grep -q "assets/.*\.dat"; then
        echo "Prepatched game detected." && sleep 1
        PREPATCH=1
        unzip_audiogroups
    fi
    apply_xdelta
    compress_audio
    sleep 3

    # Check for .dat files and move to APK
    if [ -n "$(ls $DATADIR/*.dat 2>/dev/null)" ]; then
        mkdir -p ./assets
        mv $DATADIR/*.dat ./assets/
        echo "Moved .dat files to ./assets/"

        zip -r -0 ./game.apk ./assets/
        echo "Zipped contents to ./game.apk"

        rm -rf ./assets
        echo "Deleted assets directory"
    else
        echo "No .dat files found"
    fi
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game
